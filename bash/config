#!/bin/bash
# -*- coding: utf-8 -*-
# vim: fenc=utf-8 ts=4 noet sw=4 sts=4 ft=sh tw=80

# bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*);;
	*) return;;
esac

if [ "$TERMUX_VERSION" ] && [ ! "$SESSION" ]
then SESSION=termux
fi

# just in case it was not sourced already
source .profile

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=-1

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

shopt -s nullglob

# enable color support of ls and also add handy aliases
if hash dircolors 2>/dev/null
then
	if [ -r ~/.dircolors ]
	then eval "$(dircolors -b ~/.dircolors)"
	else eval "$(dircolors -b)"
	fi
fi

### Alias definitions.
if hash exa 2>/dev/null
then
	alias ls='exa --icons --git -F --group-directories-first'
	alias la='ls -a'
else
	alias ls='ls -CF --group-directories-first --color=auto'
	alias la='ls -A'
fi
alias l='ls -x'
alias ll='ls -l'

# grep
if hash rg 2>/dev/null
then
	alias grep='rg'
	alias fgrep='rg -F'
	alias egrep='rg'
else
	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# shell modification
alias cd='cd -P'
alias cd..='cd ..'
alias cd-='cd -'

alias aria2c='aria2c --summary-interval=0 -c --no-conf -{x,s,j}16'

alias hled="hx $LEDGER_FILE"
alias hced="hx $TIMECLOCK_FILE"

alias ip='ip --color=auto'

# python virtual environment
#alias venv='python -m venv'
#alias act='. bin/activate'
#alias deact='deactivate'
#alias react='deactivate; activate'

alias update='source `which update`'

### Utility functions

tx_load() {
	local line

	if ! [ -r "$TIMECLOCK_FILE" ]
	then
		echo "error: timeclock file not found or unreadable:" >&2
		echo "  \`$TIMECLOCK_FILE'" >&2
		return 1
	fi

	tx_not_found=true

	while read -r -a line
	do
		if test ${#line[@]} -lt 3
		then continue
		fi

		tx_last=${line[*]}

		# ignore the rest of file if $1 is not given, tx_last will be incorrect
		if test -z "$1" && test "${line[0]}" = i
		then break
		fi

		if test "${line[0]}" != \; || test "${line[1]}" != account
		then continue
		fi

		# third field is account name
		tx_accounts+=("${line[2]}")

		if test "${line[2]}" = "$1"
		then tx_not_found=false
		fi
	done <"$TIMECLOCK_FILE"
}

tx_unload() {
	unset tx_not_found tx_accounts tx_last
}

tx() {
	# the common part of 'ti' and 'to' is this function.
	# $1: this string should not be at the beginning of timeclock file's last
	#     line. used to abort double 'ti'/'to's. 
	# $2: string to append to the timeclock file
	# $3: if given, is the group or account name. will be checked for explicit
	#     declaration in order to avoid using unknown names by mistake.

	if test "$1" = 'o '
	then tx_load :       # : is given to have tx_last
	else tx_load "$3"
	fi

	# check if last line matches $1 or not
	if test "$1" && test "$1" = "${tx_last:0:${#1}}" 
	then
		echo "error: cannot register in/out twice in a row" >&2

		unset tx_not_found tx_account tx_accounts tx_last

		return 2
	fi

	if test "$3" && $tx_not_found
	then
		echo -e "error: invalid account name: $3\n\nvalid names are:" >&2
		for tx_account in "${tx_accounts[@]}"
		do echo -e "Â· $tx_account" >&2
		done

		tx_unload

		return 3
	fi

	tx_unload

	if test "$2"
	then echo -e "$2" >>"$TIMECLOCK_FILE"
	fi
}

td() {
	date '+%Y-%m-%d %H:%M:%S'
}

ti() {
	if test $# -eq 0
	then
		# : is given to have tx_last
		tx_load :

		if test "${tx_last:0:2}" = 'i '
		then echo "    ${tx_last:2}"
		else echo 'nothing started yet.'
		fi

		tx_unload

		return
	fi

	if test $# -gt 1
	then tx 'i ' "\ni $(td) $1  ${*:2}" "$1"
	else tx 'i ' "\ni $(td) $1" "$1"
	fi
}

_ti_completion() {
	local account

	COMP_WORDBREAKS=${COMP_WORDBREAKS//:}

	if [ "$3" != ti ]
	then return
	fi

	tx_load

	for account in "${tx_accounts[@]}"
	do
		if [ "$2" = "${account:0:${#2}}" ]
		then COMPREPLY+=("$account")
		fi
	done

	tx_unload
}

complete -F _ti_completion ti

to() {
	if [ $# -ne 0 ]
	then
		echo -e "error: '${FUNCNAME[0]}' takes no arguments.\n" >&2
		return 1
	fi

	tx 'o ' "o $(td)"
}

try() {
	while ! env "$@"
	do sleep 0.1
	done
}

ffxyz() {
	ffplay -volume 20 -fs -f lavfi "amovie=$1, asplit [a][out1]; [a] $2 [out0]"
}

ffanal() {
	ffxyz "$1" showcqt=s=1366x768:rate=60:count=4
}

fffreq() {
	ffxyz "$1" showspectrum=s=1366x768:slide=replace:color=plasma:fps=40:scale=log:fscale=log:win_func=blackman:gain=0.75
}

sleep_until() {
	local secs

	secs=$(($(date -d "$1" +%s) - $(date +%s)))
	if [ $secs -lt 0 ]
	then echo specified moment is in the past
	return 1
	fi
	echo waiting for $secs seconds
	sleep $secs
}

go2win() {
	local args
	efibootmgr | while read -r -a args
	do
		if [[ "${args[0]}" == Boot[0-9]*\* ]] && [ "${args[1]}" = Windows ]
		then
			echo "${args[0]}"
			echo "${args[1]}"
		fi
	done
}

_optional_source() {
	if [ -r "$1" ]
 	then . "$1"
	fi
}

# command-not-found
if [ -r /etc/issue ] && read -r -a REPLY </etc/issue && [ "${REPLY[0]}" = Void ]
then
	command_not_found_handle () {
	    local list

	    if hash xlocate >/dev/null 2>&1
			then
				list="$(xlocate "bin/$1\$" 2>/dev/null | awk '{print $1}' | uniq)"
		    [ "${list}" ] || return 127

		    printf 'possible packages with %s:\n\t%s\n' "$1" "$list"
	    fi
	}
else
	_optional_source /usr/share/doc/pkgfile/command-not-found.bash
fi

eval "$(starship init bash)"

# nvm + completion
if ! command -v nvm >/dev/null
then
	_optional_source "$NVM_DIR"/nvm.sh
	_optional_source "$NVM_DIR"/bash_completion
fi

set -o vi
