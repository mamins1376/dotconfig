#!/bin/bash
# -*- coding: utf-8 -*-
# vim: fenc=utf-8 ts=4 noet sw=4 sts=4

if [ ! ${SESSION+x} ] || [ ${LANGUAGE+x} ]
then return 0
fi

export LANGUAGE=en_US:en:C
export LC_TIME="$LANG"

export VISUAL=hx
export EDITOR=hx
export LESS=-SR
export LIBVIRT_DEFAULT_URI=qemu:///system

export GCC_COLORS='error=01;31:warning=01;35:note=01;36'
GCC_COLORS="$GCC_COLORS:caret=01;32:locus=01:quote=01"

o='-b -n -l 5 --scrollbar autohide'
o="$o --tf #cacaca --tb #00000060"
o="$o --ff #e6e6e6 --fb #00000060"
o="$o --nf #747474 --nb #00000074"
o="$o --hf #e6e6e6 --nb #42424240"
o="$o --scf #747474 --scb #00000000"
export BEMENU_OPTS="$o"
unset o

XDG_CONFIG_HOME=$HOME/.config
XDG_CACHE_HOME=$HOME/.cache
XDG_LOCAL_HOME=$HOME/.local
XDG_DATA_HOME=$XDG_LOCAL_HOME/share

export MPD_HOST=$XDG_RUNTIME_DIR/mpd/socket

export PYTHONDONTWRITEBYTECODE=1
export PYTHONUSERBASE=$XDG_LOCAL_HOME

export CARGO_HOME=$XDG_CACHE_HOME/cargo
export RUSTUP_HOME=$XDG_DATA_HOME/rustup

export WINEPREFIXES=$XDG_DATA_HOME/wineprefixes

export VLANG_TOOLS=$XDG_DATA_HOME/v/cmd/tools

export PNPM_HOME=$XDG_DATA_HOME/pnpm

export GOOGLE_API_KEY=no
export GOOGLE_DEFAULT_CLIENT_ID=no
export GOOGLE_DEFAULT_CLIENT_SECRET=no

export PLATFORMIO_CORE_DIR=/D/platformio

export ANDROID_HOME=$XDG_DATA_HOME/android/sdk
if [ -d $ANDROID_HOME ]
then for dir in cmdline-tools/latest/bin platform-tools emulator
do PATH=$ANDROID_HOME/$dir:$PATH
done
fi

if [ -d $VLANG_TOOLS ]
then PATH=$VLANG_TOOLS:$PATH
fi

for item in $XDG_CONFIG_HOME/bash $XDG_CONFIG_HOME/composer/vendor $XDG_LOCAL_HOME $CARGO_HOME
do PATH=$item/bin:$PATH
done

PATH="$PNPM_HOME:$PATH"

if hash fnm >/dev/null 2>&1
then eval "$(fnm env)"
fi

_optional_source() {
  if [ -r "$1" ]
  then . "$1"
  fi
}

_optional_source "$XDG_CONFIG_HOME/$SESSION/env"

if [ -z "$SSH_AUTH_SOCK" ] && hash gnome-keyring-daemon 2>/dev/null
then
    eval "$(gnome-keyring-daemon --start --components=pkcs11,secrets,ssh 2> /dev/null)"
    export SSH_AUTH_SOCK
fi

if [ ! ${DBUS_SESSION_BUS_ADDRESS+x} ]
then _launchers+=(dbus-run-session)
fi

# automatically spawn sway (with fail-safe for lock-out prevention)
_run=/run/user/$(id -u)
_swaylog=$_run/swaylog
if [ "$SESSION" = sway ]
then (shopt -s nullglob
  if [ -z $_run/sway-ipc.$(id -u).*.sock ] && [ ! -f $_swaylog ]
  then exec "${_launchers[@]}" sway &>$_swaylog
  fi)
fi
